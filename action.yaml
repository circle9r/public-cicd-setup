name: "Prepare test"
description: Performs some preparation to run tests
inputs:
  ADMIN_PAT:
    description: ADMIN_PAT
    required: true
  AWS_ACCESS_KEY_ID:
    description: AWS_ACCESS_KEY_ID
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: AWS_SECRET_ACCESS_KEY
    required: true
  AWS_REGISTRY:
    description: AWS_REGISTRY
    required: true
  VERSION_TAG:
    description: VERSION_TAG
    required: false
  REPOSITORY:
    description: REPOSITORY
    required: false
  REPO_DEPTH:
    description: REPO_DEPTH
    required: false
    default: "1"
  NODE_VERSION:
    description: NODE_VERSION
    required: false
    default: "20.10"
  DISABLE_NPM_CACHE:
    description: DISABLE_NPM_CACHE
    required: false
    default: "false"
  SHEETJS_TOKEN:
    description: SHEETJS_TOKEN
    required: false
    default: ""
  NODE_PACKAGE_MANAGER:
    description: "Node package manager npm, yarn, or pnpm"
    required: false
    default: "npm"
runs:
  using: composite
  steps:
    - name: Debug
      run: echo "${{ github.repository }}/${{ github.ref_name }}"
      shell: bash

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        token: ${{ ( ( github.ref_name == 'master' || github.ref_name == 'main' ) && inputs.ADMIN_PAT ) || github.token }}
        persist-credentials: ${{ github.ref_name == 'master' || github.ref_name == 'main' }}
        fetch-depth: ${{ inputs.REPO_DEPTH }}
        ref: ${{ inputs.VERSION_TAG }}
        repository: ${{ inputs.REPOSITORY }}
    
    - name: Git Config
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@users.noreply.github.com"
      shell: bash

    - name: Install pnpm
      if: inputs.NODE_PACKAGE_MANAGER == 'pnpm'
      uses: pnpm/action-setup@v3
      with:
        version: 8
    
    - name: Setup Nodejs
      uses: actions/setup-node@v4
      if: inputs.DISABLE_NPM_CACHE == 'false'
      with:
        node-version: ${{ inputs.NODE_VERSION }}
        cache: ${{ inputs.NODE_PACKAGE_MANAGER }}
        # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. 
        # It will generate hash from the target file for primary key. It works only If cache is specified.  
        # Supports wildcards or a list of file names for caching multiple dependencies.
        # Default: ''
        # cache-dependency-path: '**/package-lock.json'
    - name: Setup Nodejs Without Cache
      uses: actions/setup-node@v4
      if: inputs.DISABLE_NPM_CACHE == 'true'
      with:
        node-version: ${{ inputs.NODE_VERSION }}

    # Begin Backward compatible setup
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      if: inputs.DISABLE_NPM_CACHE == 'pnpm'
      with:
        version: 8.14.3

    - name: Setup Nodejs Using PNPM
      uses: actions/setup-node@v4
      if: inputs.DISABLE_NPM_CACHE == 'pnpm'
      with:
        node-version: ${{ inputs.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'
    # End Backward compatible setip

    - name: Configure NPM registry for Bison
      run: |
        npm config set '@circle9r:registry' 'https://npm.pkg.github.com/'
        npm config set '//npm.pkg.github.com/:_authToken' ${{ inputs.ADMIN_PAT }}
      shell: bash
    - name: Configure NPM registry for SheetJS
      if: inputs.SHEETJS_TOKEN != ''
      run: |
        npm config set '@sheet:registry' 'https://pylon.sheetjs.com:54111/'
        npm config set '//pylon.sheetjs.com:54111/:_authToken' ${{ inputs.SHEETJS_TOKEN }}
      shell: bash
    - name: Setup NPM globals
      run: npm i -g @circle9r/bison-cicd@2
      shell: bash
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
        registries: ${{ inputs.AWS_REGISTRY }}

    - name: Get pnpm store directory
      if: inputs.NODE_PACKAGE_MANAGER == 'pnpm'
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v3
      if: inputs.NODE_PACKAGE_MANAGER == 'pnpm'
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      if: inputs.NODE_PACKAGE_MANAGER == 'pnpm'
      shell: bash
      run: pnpm install